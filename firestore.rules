/**
 * @fileoverview Firestore Security Rules for the blog application.
 *
 * Core Philosophy:
 * This ruleset enforces a mixed security model. Blog posts are publicly readable but
 * can only be created, updated, or deleted by their respective authors or an administrator.
 *
 * Data Structure:
 * Blog posts are stored in the top-level `/blogPosts/{blogPostId}` collection.
 *
 * Key Security Decisions:
 * - Public read access is granted to all blog posts.
 * - Only authenticated users can create blog posts.
 * - Only the author of a blog post or an administrator can update or delete it.
 * - No validation is performed on data types beyond authorization-critical fields.
 *
 * Denormalization for Authorization:
 * The `BlogPost` entity has an `authorId` field that is used to determine ownership for write operations.
 * This avoids needing to query a separate collection to verify authorship.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to blog posts, but restricts create, update, and delete operations to the author or an admin.
     * @path /blogPosts/{blogPostId}
     * @allow (get, list) - Any user can read/list blog posts.
     * @allow (create) - User with auth and matching authorId can create a blog post.
     * @allow (update, delete) - User with auth and matching authorId can update/delete a blog post.
     * @deny (create) - User without auth attempts to create a blog post.
     * @deny (update, delete) - User without auth attempts to update/delete a blog post.
     * @deny (update, delete) - User with auth but not the author attempts to update/delete a blog post.
     * @principle Allows public read access while restricting write access to the author or an admin.
     */
    match /blogPosts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && (request.resource.data.authorId == request.auth.uid || isAdmin());
      allow update, delete: if isSignedIn() && (isExistingOwner(resource.data.authorId) || isAdmin());
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
    
    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isAdmin() {
      return request.auth.uid == "112875705097306149241";
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}